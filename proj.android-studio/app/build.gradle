import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "xsg.lychee.richalpha"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'cocos2djs'
                    arguments 'NDK_TOOLCHAIN_VERSION=clang'

                    def module_paths = [project.file("${buildDir}/../../../../cocos2d-x"),
                                        project.file("${buildDir}/../../../../cocos2d-x/cocos"),
                                        project.file("${buildDir}/../../../../cocos2d-x/external")]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
                }
            }
        }
    }

    sourceSets {
        main {
            java.srcDir "src"
            res.srcDir "res"
            jniLibs.srcDir "libs"
            manifest.srcFile "AndroidManifest.xml"
        }

//      apk {
//          res.srcDirs += "res-apk"
//      }
//
//      store {
//          res.srcDirs += "res-store"
//      }
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

        release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }

        debug {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }

            buildConfigField 'String', 'CHANNEL', '""'
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }

            buildConfigField 'String', 'CHANNEL', '""'
        }
    }

    flavorDimensions "rich"
    productFlavors {
        apk {
            applicationId "xsg.lychee.richapk"

            resValue "string", "app_name", "Rich-apk"
            resValue "string", "facebook_app_id_rich", "1418829754939620"
            resValue "string", "fb_login_protocol_scheme_rich", "fb1418829754939620"

            manifestPlaceholders = [FACEBOOK_APP_ID_RICH:"1418829754939620"]
        }
        store {
            applicationId "xsg.lychee.richalpha"

            resValue "string", "app_name", "Rich-Alpha"
            resValue "string", "facebook_app_id_rich", "647515922340982"
            resValue "string", "fb_login_protocol_scheme_rich", "fb647515922340982"

            manifestPlaceholders = [FACEBOOK_APP_ID_RICH:"647515922340982"]
        }
    }

    // 因增加 productFlavors 會使 apk 目錄改變，導致 cocos creator 編譯流程失敗，所以添加一個流程複製 apk 到原本的目錄
    afterEvaluate {
        assembleDebug.dependsOn copyApksForCocos
        assembleRelease.dependsOn copyApksForCocos
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/merged_assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        def sourceDir = "${buildDir}/../../../../.."

        copy {
            from "${sourceDir}/res"
            into "${outputDir}/res"
        }

        copy {
            from "${sourceDir}/src"
            into "${outputDir}/src"
        }

        copy {
            from "${sourceDir}/jsb-adapter"
            into "${outputDir}/jsb-adapter"
        }

        copy {
            from "${sourceDir}/subpackages"
            into "${outputDir}/subpackages"
        }

        copy {
            from "${sourceDir}/main.js"
            from "${sourceDir}/project.json"
            into outputDir
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: "${buildDir}/../../../../cocos2d-x/cocos/platform/android/java/libs", include: ['*.jar'])
    implementation project(':libcocos2dx')
    implementation project(':appsflyer')
    implementation project(':payment')
    implementation project(':nativebridge')
    implementation 'com.google.zxing:core:3.3.3'
    implementation ('com.facebook.android:facebook-android-sdk:4.34.0'){
        exclude group: 'com.google.zxing'
    }
    configurations.all {
        resolutionStrategy.force "com.android.support:appcompat-v7:${PROP_BUILD_TOOLS_VERSION}"
        resolutionStrategy.force "com.android.support:support-v4:${PROP_BUILD_TOOLS_VERSION}"
    }
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.alibaba:fastjson:1.2.61'

    /**
     * 使用 Firebase BoM 将 Firebase SDK 添加到您的应用
     *
     * 对于 Gradle 5.0 及更高版本，将自动启用 BoM 支持
     * 对于更早的 Gradle 版本，您必须启用 BoM 功能
     * https://firebase.google.com/docs/android/setup?hl=zh-cn
     */
    implementation 'com.google.firebase:firebase-bom:17.0.0'
    implementation 'com.google.firebase:firebase-core'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.crashlytics.sdk.android:crashlytics'
    implementation 'com.google.firebase:firebase-perf'
    implementation 'com.google.firebase:firebase-analytics'

    implementation 'com.linecorp:linesdk:5.1.1'

    //时间选择控件库
    implementation 'com.jzxiang.pickerview:TimePickerDialog:1.0.1'
}

task copyApksForCocos() {
    doLast {
        android.applicationVariants.all { variant -> 
            // copyApkToCocosPath(variant) 
            def buildDir = "${project.getBuildDir()}/outputs/apk/${variant.buildType.name}"

            if (variant.name.startsWith('store')) {
                variant.outputs.each { output ->
                    if ( output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                        copy {
                            from output.outputFile
                            into buildDir
                            rename {
                                "${project.name}-${variant.buildType.name}.apk"
                            }
                        }
                    }
                }
            }
        }
    }
}

task cleanCreatorDefaultFiles(type: Delete) {
    delete "src/org"
}
cleanCreatorDefaultFiles.execute()
